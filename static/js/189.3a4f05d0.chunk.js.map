{"version":3,"file":"static/js/189.3a4f05d0.chunk.js","mappings":"yOAEaA,GAAgBC,EAAAA,EAAAA,IAAG,wKAanBC,GAAkBD,EAAAA,EAAAA,IAAG,8GAUrBE,GAAuBF,EAAAA,EAAAA,IAAG,6K,oOCvBvC,ECOe,SAAH,GAAuC,IAAjCG,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAChBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,UAACC,EAAA,EAAK,CAACC,GAAI,CAAEC,UAAW,GAAIC,UAAU,MAAMC,QAAS,EAAGC,eAAe,SAAQ,WAC7E,SAACC,EAAA,EAAU,CACT,aAAW,OACXC,MAAM,UACNC,UAAU,QACVC,QAAS,kBAAMX,EAAS,IAAI,EAAC,UAE7B,SAACY,EAAA,EAAa,OAEhB,UAACC,EAAA,EAAU,CAACV,GAAI,CAAEW,GAAI,GAAKC,QAAQ,KAAKC,cAAY,yBACvClB,SAGf,SAACe,EAAA,EAAU,CAACV,GAAI,CAAEW,GAAI,GAAKC,QAAQ,QAAQC,cAAY,WACtDjB,MAIP,EC7BA,ECgBoB,SAAH,GAAgD,IAA1CkB,EAAQ,EAARA,SAAUnB,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAC/BC,GAAWC,EAAAA,EAAAA,MACTiB,GAAeC,EAAAA,EAAAA,MAAfD,WAER,OACE,iCACE,SAAC,EAAM,CACLpB,KAAMA,EACNC,YAAaA,KAGf,SAACqB,EAAA,EAAO,CAACjB,GAAI,CAAEW,GAAI,MAEnB,SAACO,EAAA,EAAI,UACFJ,EAASK,KAAI,SAACC,EAASC,GAAK,OAC3B,SAACC,EAAA,GAAQ,CACPC,gBAAc,EAEdf,QACE,kBAAMX,EAAS,aAAD,OAAckB,EAAU,oBAAYK,EAAQI,IAAK,EAChE,UAED,SAACC,EAAA,EAAc,WACb,SAACC,EAAA,EAAY,CAACC,QAASP,EAAQzB,UAChB,kBAPD0B,GAQP,OAIf,SAACJ,EAAA,EAAO,CAACjB,GAAI,CAAEW,GAAI,MAEnB,SAACiB,EAAA,EAAM,CACL5B,GAAI,CAAEW,GAAI,GACVC,QAAQ,YACRJ,QAAS,kBAAMX,EAAS,aAAD,OAAckB,EAAU,gBAAe,EAAC,2BAMvE,ECxDA,ECMiB,WACf,IAAQA,GAAeC,EAAAA,EAAAA,MAAfD,WAER,GAAiCc,EAAAA,EAAAA,GAAStC,EAAAA,GAAe,CACvDuC,UAAW,CACTN,GAAIT,KAFAgB,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAMxB,GAAgCC,EAAAA,EAAAA,UAAoB,IAAG,eAAhDpB,EAAQ,KAAEqB,EAAW,KAO5B,OANAC,EAAAA,EAAAA,YAAU,WACJH,GACFE,EAAYF,EAAKI,SAASC,SAE9B,GAAG,CAACL,IAEDF,GACM,0EAGNC,GACM,8CAGP,SAAC,EAAW,CACVlB,SAAUA,EACVnB,KAAMsC,EAAKI,SAAS1C,KACpBC,YAAaqC,EAAKI,SAASzC,aAGjC,C","sources":["graphql/queries.ts","modules/productList/components/header/index.ts","modules/productList/components/header/header.tsx","modules/productList/index.ts","modules/productList/productList.tsx","pages/category/index.ts","pages/category/category.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const LOAD_CATEGORY = gql`\n  query($id: ID!) {\n    Category(id: $id){\n      name,\n      description,\n      Products {\n        id,\n        name\n      }\n    }\n  }\n`\n\nexport const LOAD_CATEGORIES = gql`\n  query {\n    allCategories{\n      id,\n      name,\n      description\n    }\n  }\n`\n\nexport const LOAD_PRODUCT_DETAILS = gql`\n  query($id: ID!) {\n    Product(id: $id){\n      name,\n      description,\n      color,\n      stock,\n      price,\n      category_id\n    }\n  }\n`","import Header from './header'\n\nexport default Header","import { useNavigate } from 'react-router-dom'\nimport { IconButton, Stack, Typography } from '@mui/material'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\n\ninterface IProps {\n  name: string,\n  description: string\n}\n\nconst Header = ({ name, description }: IProps) => {\n  const navigate = useNavigate()\n  return (\n    <>\n      <Stack sx={{ marginTop: 4}} direction=\"row\" spacing={2} justifyContent=\"center\">\n        <IconButton\n          aria-label=\"back\"\n          color=\"primary\"\n          component=\"label\"\n          onClick={() => navigate('/')}\n        >\n          <ArrowBackIcon />\n        </IconButton>\n        <Typography sx={{ mt: 5 }} variant=\"h4\" gutterBottom>\n          Category: {name}\n        </Typography>\n      </Stack>\n      <Typography sx={{ mt: 5 }} variant=\"body1\" gutterBottom>\n      {description}\n    </Typography>\n  </>\n  )\n}\n\nexport default Header","import ProductList from './productList';\n\nexport default ProductList","import { useParams, useNavigate } from 'react-router-dom'\nimport { \n  Button,\n  Divider,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText } from '@mui/material'\n\nimport { Product } from 'src/graphql/types'\nimport Header from './components/header'\n\ninterface IProps {\n  name: string,\n  description: string,\n  products: Product[]\n}\n\nconst ProductList = ({ products, name, description }:IProps) => {\n  const navigate = useNavigate()\n  const { categoryId } = useParams()\n\n  return (\n    <>\n      <Header\n        name={name}\n        description={description}\n      />\n\n      <Divider sx={{ mt: 2 }} />\n\n      <List>\n        {products.map((product, index) => (\n          <ListItem \n            disablePadding \n            key={`product-${index}`}\n            onClick={\n              () => navigate(`/category/${categoryId}/product/${product.id}`)\n            }\n          >\n            <ListItemButton>\n              <ListItemText primary={product.name}/>\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n\n      <Divider sx={{ mt: 2 }} />\n\n      <Button \n        sx={{ mt: 2 }}\n        variant=\"contained\"\n        onClick={() => navigate(`/category/${categoryId}/product/add`)}\n      >\n        Add Product\n      </Button>\n    </>\n  )\n}\n\nexport default ProductList","import Category from './category'\n\nexport default Category","import { useEffect, useState } from \"react\"\nimport { useParams } from 'react-router-dom'\nimport { useQuery } from '@apollo/client'\n\nimport { LOAD_CATEGORY } from 'src/graphql/queries'\nimport { Product } from 'src/graphql/types'\nimport ProductList from 'src/modules/productList'\n\nconst Category = () => {\n  const { categoryId } = useParams()\n\n  const { error, loading, data } = useQuery(LOAD_CATEGORY, {\n    variables: {\n      id: categoryId\n    }\n  })\n\n  const [products, setProducts] = useState<Product[]>([])\n  useEffect(() => {\n    if (data) {\n      setProducts(data.Category.Products)\n    }\n  }, [data]);\n\n  if(error){\n    return <>Sorry, There was an error to fetch data</>\n  }\n\n  if(loading){\n    return <>Loading...</>\n  }\n  return (\n    <ProductList\n      products={products}\n      name={data.Category.name}\n      description={data.Category.description}\n    />\n  )\n}\n\nexport default Category"],"names":["LOAD_CATEGORY","gql","LOAD_CATEGORIES","LOAD_PRODUCT_DETAILS","name","description","navigate","useNavigate","Stack","sx","marginTop","direction","spacing","justifyContent","IconButton","color","component","onClick","ArrowBack","Typography","mt","variant","gutterBottom","products","categoryId","useParams","Divider","List","map","product","index","ListItem","disablePadding","id","ListItemButton","ListItemText","primary","Button","useQuery","variables","error","loading","data","useState","setProducts","useEffect","Category","Products"],"sourceRoot":""}