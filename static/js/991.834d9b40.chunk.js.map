{"version":3,"file":"static/js/991.834d9b40.chunk.js","mappings":"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","sources":["graphql/mutations.ts","graphql/queries.ts","modules/productForm/schema.ts","modules/productForm/productForm.tsx","modules/productForm/index.ts","pages/category/addProduct/index.ts","pages/category/addProduct/addProduct.tsx"],"sourcesContent":["import { gql} from '@apollo/client'\n\nexport const CREATE_PRODUCT = gql`\n  mutation Mutation(\n    $name: String!\n    $description: String!\n    $color: String!\n    $stock: Int!\n    $price: Float!\n    $category_id: ID!\n  ) {\n    createProduct(\n      name: $name\n      description: $description\n      color: $color\n      stock: $stock\n      price: $price\n      category_id: $category_id\n    ) {\n      id\n      name\n      description\n      color\n      stock\n      price\n      category_id\n    }\n  }\n`\n\nexport const UPDATE_PRODUCT = gql`\n  mutation Mutation(\n    $updateProductId: ID!\n    $name: String\n    $description: String\n    $color: String\n    $stock: Int\n    $price: Float\n    $categoryId: ID\n  ) {\n    updateProduct(\n      id: $updateProductId\n      name: $name\n      description: $description\n      color: $color\n      stock: $stock\n      price: $price\n      category_id: $categoryId\n    ) {\n      name\n      description\n      color\n      stock\n      price\n      category_id\n      id\n    }\n  }\n`\n\nexport const REMOVE_PRODUCT = gql`\n  mutation Mutation($removeProductId: ID!) {\n    removeProduct(id: $removeProductId) {\n      id\n      name\n      description\n      color\n      stock\n      price\n      category_id\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\nexport const LOAD_CATEGORY = gql`\n  query($id: ID!) {\n    Category(id: $id){\n      name,\n      description,\n      Products {\n        id,\n        name\n      }\n    }\n  }\n`\n\nexport const LOAD_CATEGORIES = gql`\n  query {\n    allCategories{\n      id,\n      name,\n      description\n    }\n  }\n`\n\nexport const LOAD_PRODUCT_DETAILS = gql`\n  query($id: ID!) {\n    Product(id: $id){\n      name,\n      description,\n      color,\n      stock,\n      price,\n      category_id\n    }\n  }\n`","import { object, string, number } from 'yup'\n\nconst getSchema = () => {\n  return (\n    object().shape({\n      name: string().required('Please fill the name'),\n      description: string().required('Please fill the description'),\n      color: string().required('Please fill the color'),\n      stock: number()\n        .moreThan(-1)\n        .integer('Stock must be an integer')\n        .required('Please fill the stock')\n        .typeError('Stock must be a number'),\n      price: number()\n        .positive('Please write a valid price')\n        .required('Please fill the price')\n        .typeError('Price must be a number'),\n      category_id: number().required()\n    })\n  )\n}\n\nexport default getSchema\n","import { useForm, SubmitHandler } from 'react-hook-form'\nimport { useMutation } from '@apollo/client'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport {\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  Stack,\n  TextField,\n  Typography \n} from '@mui/material'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\n\nimport { CREATE_PRODUCT } from 'src/graphql/mutations'\nimport { LOAD_CATEGORY } from 'src/graphql/queries'\nimport { Product } from 'src/graphql/types'\nimport getSchema from './schema'\nimport { FormValues } from './types'\n\nconst ProductForm = () => {\n  const navigate = useNavigate()\n  const { categoryId } = useParams()\n\n  const schema = getSchema()\n  const { register, handleSubmit, formState: { errors } } = useForm<FormValues>({\n    resolver: yupResolver(schema),\n    mode: 'onBlur'\n  });\n\n  const [createProduct, { \n    loading, error \n  }] = useMutation<Product>(CREATE_PRODUCT, {\n    refetchQueries: [{\n      query: LOAD_CATEGORY,\n      variables: {\n        id: categoryId,\n      },\n    }],\n  })\n\n  const onSubmit: SubmitHandler<FormValues> = async data => {\n    await createProduct({\n      variables: {\n        ...data\n      }\n    })\n\n    if(!error) {\n      navigate(`/category/${categoryId}`)\n    }\n  }\n\n  if(loading) {\n    return <>Submitting...</>\n  }\n\n  return (\n    <>\n      <Stack sx={{ marginTop: 4}} direction=\"row\" spacing={2} justifyContent=\"center\">\n        <IconButton\n          aria-label=\"back\"\n          color=\"primary\"\n          component=\"label\"\n          onClick={() => navigate(`/category/${categoryId}`)}\n        >\n          <ArrowBackIcon />\n        </IconButton>\n        <Typography sx={{ mt: 5 }} variant=\"h4\" gutterBottom>\n          Add Product\n        </Typography>\n      </Stack>\n      <Box \n        component=\"form\" \n        noValidate \n        autoComplete=\"off\" \n        onSubmit={handleSubmit(onSubmit)}\n        sx={{'& .MuiTextField-root': { m: 1 }}}\n      >\n        <FormControl fullWidth>\n          <input\n            type=\"number\"\n            hidden\n            defaultValue={categoryId}\n            {...register('category_id')}\n          />\n          <TextField\n            required\n            label=\"Name\"\n            {...register('name')}\n            helperText={errors.name?.message} \n          />\n          <TextField\n            required\n            label=\"Description\"\n            {...register('description')}\n            helperText={errors.description?.message}\n          />\n          <TextField\n            helperText={errors.color?.message}\n            required\n            label=\"Color\"\n            {...register('color')}\n          />\n          <TextField\n            type=\"number\"\n            required\n            label=\"Stock\"\n            {...register('stock')}\n            helperText={errors.stock?.message}\n          />\n          <TextField\n            type=\"number\"\n            required\n            label=\"Price\"\n            {...register('price')}\n            helperText={errors.price?.message}\n          />\n        </FormControl>\n\n        <Button sx={{ mt: 2 }} variant=\"contained\" type=\"submit\">\n          Submit\n        </Button>\n      </Box>\n    </>\n  )\n}\n\nexport default ProductForm","import ProductForm from \"./productForm\"\n\nexport default ProductForm","import AddProduct from './addProduct'\n\nexport default AddProduct","import ProductForm from \"src/modules/productForm\"\n\nconst AddProduct = () => {\n  return (\n    <ProductForm />\n  )\n}\n\nexport default AddProduct"],"names":["CREATE_PRODUCT","gql","UPDATE_PRODUCT","REMOVE_PRODUCT","LOAD_CATEGORY","LOAD_CATEGORIES","LOAD_PRODUCT_DETAILS","object","shape","name","string","required","description","color","stock","number","moreThan","integer","typeError","price","positive","category_id","navigate","useNavigate","categoryId","useParams","schema","getSchema","useForm","resolver","yupResolver","mode","register","handleSubmit","errors","formState","useMutation","refetchQueries","query","variables","id","createProduct","loading","error","onSubmit","data","Stack","sx","marginTop","direction","spacing","justifyContent","IconButton","component","onClick","ArrowBack","Typography","mt","variant","gutterBottom","Box","noValidate","autoComplete","m","FormControl","fullWidth","type","hidden","defaultValue","TextField","label","helperText","message","Button"],"sourceRoot":""}